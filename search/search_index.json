{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"OPC/","title":"Crop Management","text":""},{"location":"OPC/#agricultural-management","title":"Agricultural Management","text":"<p>OPC input files refers to the agricultural management practice files. Creating these files is not yet implemented in the toolkit. Refer to the epic user manual on how to prepare the management files.</p>"},{"location":"Soil/","title":"Soil Module","text":""},{"location":"Soil/#soil-module","title":"Soil Module","text":"<p>In agriculture simulations, such as those conducted using the EPIC model, soil data directly influences water availability, nutrient supply, and overall crop growth predictions. Soil input files to the model contain detailed information about the soil properties of a specific location, depth wise. Geo-Epic helps in generating soil files required by the EPIC Model from two soil data sources: </p> <ul> <li>USDA SSURGO: which contains detailed surveys of U.S. soils. </li> <li>ISRIC SoilGrids 250m: which offers global coverage in a grid format.</li> </ul> <p></p>"},{"location":"Soil/#usage","title":"Usage","text":""},{"location":"Soil/#usda-ssurgo","title":"USDA SSURGO","text":"<p>The USDA Soil Survey Geographic (SSURGO) database is a comprehensive resource for soil data collected by the Natural Resources Conservation Service (NRCS) across the United States and the Territories. This database provides detailed information on soil properties and classifications. The data is collected through extensive field surveys and laboratory analysis. For more detailed information, visit the USDA NRCS SSURGO page.</p> <p>To fetch and output soil files using the USDA SSURGO database, following commands could be used. For a specific location, specify the latitude and longitude coordinates to generate a soil file named {mukey}.SOL. </p> <pre><code># Fetch and output soil files for a specific latitude and longitude\n&gt;&gt; geo-epic soil usda --fetch {lat} {lon} --out {out_path}\n\n# Fetch for a list of locations in a csv file with lat, lon\n&gt;&gt; geo-epic soil usda --fetch {list.csv} --out {out_dir}\n\n# Fetch for crop sequence boundaries shape file.\n&gt;&gt; geo-epic soil usda --fetch {aoi_csb.shp} --out {out_dir}\n</code></pre> <p>Note: This command will write Soil IDs (mukeys) corresponding to each location as an attribute into the input file, when used with a CSV file or crop sequence boundary shapefile.</p> <p>Processing ssurgo gdb file:</p> <p>To process a SSURGO GDB file and generate soil files for all unique soils contained in it, follow these steps. For instance, if you require soil files for Maryland, navigate to the 'State Database - Soils' section, and download the 'gSSURGO_MD.zip' file. Once the download is complete, extract the contents and place the GDB file in the 'soil' folder within your workspace. Use the following command to generate the soil files for all mukeys. </p> <p>Link: https://www.nrcs.usda.gov/resources/data-and-reports/gridded-soil-survey-geographic-gssurgo-database</p> <pre><code>&gt;&gt; geo-epic soil process_gdb -i {path/to/ssurgo.gdb} -o {out_dir} \n</code></pre>"},{"location":"Soil/#isric-soil-grids-data","title":"ISRIC Soil Grids Data","text":"<p>The ISRIC Soil Grids 250 meters database is an advanced resource providing high-resolution global soil information. Managed by the International Soil Reference and Information Centre (ISRIC), it uses state-of-the-art machine learning methods to map soil properties across the globe. The prediction models are based on soil profile observations and environmental covariates, including climate, land cover, and terrain morphology. SoilGrids offers soil properties at six standard depth intervals at 250 meters spatial resolution. For more detailed information, visit the ISRIC Soil Grids page.</p> <p></p> <p>To fetch and output soil files using the ISRIC Soil Grids 250 meters database, you can use the following commands. <pre><code># Fetch and output soil files for a specific latitude and longitude\n&gt;&gt; geo-epic soil soilgrids --fetch {lat} {lon} --out {out_path}\n\n# Fetch for a list of locations in a csv file with lat, lon, out_path columns\n&gt;&gt; geo-epic soil soilgrids --fetch {list.csv} --out {column_name}\n</code></pre></p> <p>Once the tool finishes running, you should see files named {out_name}.SOL in your specified output directory. Open this file to verify that it contains the necessary soil data formatted correctly for use in the EPIC model.  Refer to the EPIC manual for Soil file formatting</p>"},{"location":"Weather/","title":"Weather Module","text":""},{"location":"Weather/#weather-module","title":"Weather Module","text":"<p>Weather data is vital in providing essential environmental inputs that significantly influence crop growth and development. Reliable weather inputs ensure that agricultural simulations reflect realistic responses to climatic conditions. The EPIC model requires weather input files that detail daily and monthly climatic variables. Daily files provide day-to-day weather data, while monthly files summarize the average or total values per month. These files are crucial for driving the daily simulation processes in EPIC.</p>"},{"location":"Weather/#fetching-weather-data","title":"Fetching Weather Data","text":"<p>Geo-Epic streamlines the process of fetching and organizing weather data essential for EPIC simulations. It supports the creation of weather input files from daymet, and also from sophisticated datasets available through Google Earth Engine. One can define a composite collection in the config file, detailing the specific variables to select from each data source, tailoring the dataset to meet the needs of their simulations. </p>"},{"location":"Weather/#using-gee-collections","title":"Using GEE collections","text":"<p>Geo-epic allows the integration of weather and climate data sources on GEE. To explore the datasets, visit Google Earth Engine's dataset catalog and GEE Community Catalog. Private assets can also be uploaded to Earth Engine, to use them in combination with existing datasets. Below is an example of configuration file that can be used to create weather input files.</p> <p>Example config files:</p> <ul> <li>using AgERA5</li> </ul> <pre><code># Global parameters\nglobal_scope:\n  time_range: ['2002-01-01', '2022-12-31']\n  variables: ['srad', 'tmax', 'tmin', 'prcp', 'rh', 'ws']  \n  resolution: 9600\n\n\n# Specify Earth Engine (EE) collections and their respective variables\ncollections:\n  AgEra5:\n    collection: 'projects/climate-engine-pro/assets/ce-ag-era5/daily'\n    variables:\n      srad: b('Solar_Radiation_Flux') \n      tmax: b('Temperature_Air_2m_Max_24h') - 273.15\n      tmin: b('Temperature_Air_2m_Min_24h') - 273.15\n      prcp: b('Precipitation_Flux') \n      rh: b('Relative_Humidity_2m_06h')\n      ws: b('Wind_Speed_10m_Mean')\n</code></pre> <p>Using the config file to get data:</p> <pre><code># Fetch and output weather input files for a specific latitude and longitude\n&gt;&gt; geo-epic weather config.yml --fetch {lat} {lon} --out {out_path}\n\n# Fetch for a list of locations in a csv file with lat, lon, out_path columns\n&gt;&gt; geo-epic weather config.yml --fetch {list.csv} --out {column_name}\n\n# Fetch for crop sequence boundaries shape file.\n&gt;&gt; geo-epic weather config.yml --fetch {aoi_csb.shp} --out {out_dir}\n</code></pre> <p>Note: This command will write weather grid IDs corresponding to each location as an attribute into the input file, when used with a CSV file or crop sequence boundary shapefile.</p>"},{"location":"Weather/#from-daymet-and-nldas","title":"From Daymet and NLDAS","text":"<p>To fetch weather data for a specific latitude and longitude using the Daymet dataset, start by downloading the windspeed data from the NLDAS dataset and saving it to the specified directory. Afterward, fetch the other required weather data from the Daymet dataset.</p> <pre><code># To download windspeed data, use the following command\n&gt;&gt; geo-epic weather windspeed -bbox &lt;bounding_box&gt; -start &lt;start_date&gt; -end &lt;end_date&gt; -out './weather'\n\n# To fetch and output weather input files for a specific latitude and longitude\n&gt;&gt; geo-epic weather daymet --fetch {lat} {lon} -start &lt;start_date&gt; -end &lt;end_date&gt; --out './weather'\n</code></pre>"},{"location":"api/","title":"API","text":""},{"location":"api/#commands-available","title":"Commands Available","text":""},{"location":"api/#todo","title":"(ToDo)","text":"<p>Geo-Epic allows you to run various commands. The structure is as show below:</p> <p><pre><code>geo-epic {module} {func} -options\n</code></pre> example usage: <pre><code>geo-epic workspace new -w Test\n</code></pre></p>"},{"location":"api/#list-of-modules-and-functions","title":"List of Modules and Functions:","text":""},{"location":"api/#workspace","title":"workspace","text":"<ul> <li>new: Create a new workspace with a template structure.</li> <li>prepare: Prepare the input files using config file.</li> <li>run: Execute the simulations.</li> <li>post_process: Process Output files from simulation runs.</li> </ul>"},{"location":"api/#weather","title":"weather","text":"<ul> <li>ee: </li> <li>windspeed: </li> <li>download_daily: Download daily weather data. </li> <li>daily2monthly: Convert daily weather data to monthly.</li> </ul>"},{"location":"api/#soil","title":"soil","text":"<ul> <li>usda:</li> <li>isirc:</li> <li>process_gdb: Process ssurgo gdb file.</li> </ul>"},{"location":"api/#sites","title":"sites","text":"<ul> <li>process_foi: Process fields of interest file.  (TODO)</li> <li>generate: Generate site files from processed data.</li> </ul> <p>For more details on each command and its options, use: <pre><code>geo-epic {module} {func} --help\n</code></pre></p>"},{"location":"csb/","title":"Crop Sequence Boundaries","text":""},{"location":"csb/#crop-sequence-boundaries","title":"Crop Sequence Boundaries","text":"<p>For effective simulations using the EPIC model, it is essential to have land units that are characterized by uniform soil properties and consistent management practices. One way to achieve this for the USA is by utilizing the Crop Sequence Boundaries (CSB) dataset. The CSB dataset is derived by analyzing annual variations in the USDA's Cropland Data Layer (CDL). The CSB method involves identifying and demarcating the boundaries of agricultural fields that have maintained consistent crop rotation sequence over several years. </p> <p></p> <p>Crop Sequence Boundaries (CSB): Delineated Fields Using Remotely Sensed Crop Rotations.  USDA-NASS &amp; Global Conservation Institute. Hunt, K. A., Abernethy, J., Beeson, P., Bowman, M., Wallander, S., &amp; Williams, R.</p>"},{"location":"csb/#obtaining-the-csb-dataset","title":"Obtaining the CSB dataset","text":"<p>Visit the following URL: https://www.nass.usda.gov/Research_and_Science/Crop-Sequence-Boundaries/index.php to download the 'Crop Sequence Boundaries 2016-2023' dataset. After downloading, extract the dataset, which includes crop-field shapes for the entire USA. You can then use crop_csb tool to clip it to fit your Area of Interest (AOI). If your study focuses on Maryland, clip the shapefile for Maryland and save it.</p>"},{"location":"csb/#clipping-the-csb-file-to-your-area-of-interest","title":"Clipping the CSB file to your Area of Interest","text":"<p>Geo-Epic comes with a command-line tool to filter and clip the CSB file for your specific region of interest. The tool can be invoked with various options to specify the region: <pre><code># Help with the options provided by the tool\n&gt;&gt; geo-epic crop_csb -h\n\n# Cropping the csb to get the shapefile for Maryland:\n&gt;&gt; geo-epic crop_csb path/to/input.gdb output.shp --state_name \"Maryland\"\n\n# Using the state FIPS code (24) for Maryland:\n&gt;&gt; geo-epic crop_csb path/to/input.gdb output.shp --state_fips \"24\"\n\n# To get the shapefile for Montgomery County, Maryland:\n&gt;&gt; geo-epic crop_csb path/to/input.gdb output.shp --county_name \"Montgomery, Maryland\"\n\n# Cropping the CSB using a bounding box:\n&gt;&gt; geo-epic crop_csb path/to/input.gdb output.shp --bbox \"-77.5,38.0,-76.0,39.5\"\n\n# Cropping the csb around a center point with a specified extent in km:\n&gt;&gt; geo-epic crop_csb path/to/input.gdb output.shp --center \"39.0,-77.0\" --extent \"50x50\"\n</code></pre></p> <p>Note: For countries other than USA, a geo-tiff file covering the region of interest with one channel being the cultivated crop land mask of that region and another channel containing corresponding management info ID can be used to utilize Geo-Epic.</p>"},{"location":"epic/","title":"EPIC Model","text":""},{"location":"epic/#environmental-policy-integrated-climate-model","title":"Environmental Policy Integrated Climate Model","text":"<p>The Environmental Policy Integrated Climate (EPIC) model, originally known as the Erosion/Productivity Impact Calculator, is designed to simulate a field, farm or small watershed, that is homogenous in terms of climate, soil, land use, and topography. EPIC is capable of simulating around eighty crops. This model helps in analyzing the effects of management strategies on soil erosion and extends to other aspects of agricultural sustainability like water quality, crop yields, plant competition, and pest control.</p> <p>For more details on EPIC model, visit Texas A&amp;M AgriLife site. </p> <p> </p> <p></p> <p>Initially developed in the early 1980s, (J. R. Williams, Jones, &amp; Dyke, 1984). EPIC integrated components from previous models such as CREAMS (Knisel, 1980) and SWRRB (J. R. Williams, Nicks, &amp; Arnold, 1985). The model was later enhanced with a pesticide component from GLEAMS (Leonard, 1987) to assess pesticide fate, further developed by Sabbagh, Geleta, Elliott, Williams, &amp; Griggs (1991). EPIC has evolved to address broader issues such as global climate change impacts, biomass production for energy, and landfill design, making it a versatile tool in environmental and agricultural management.</p> <p></p> <p>Refer to the user manual for detailed guidance on using EPIC: </p>"},{"location":"getting-started/","title":"Geo-Epic","text":"<p>A toolkit for geospatial crop simulations using EPIC model </p>"},{"location":"getting-started/#overview","title":"Overview","text":"<p>This package expands the capabilities of the EPIC crop simulation model, to simulate crop growth and development across large geographies, such as entire states or counties by leveraging openly availabe remote sensing products and geospatial databases. Additionally, the toolkit features a unique calibration module that allows fine-tuning of model parameters to reflect specific local conditions or experimental results. This toolkit allows researchers to assess crop production potential, management scenarios and risks at broader scales, informing decision-making for sustainable agricultural practices.</p>"},{"location":"installation/","title":"Installation steps","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>Before starting the setup, ensure you have <code>wget</code> and <code>conda</code> installed.  Follow the links for corresponding installation guides.</p>"},{"location":"installation/#steps-to-set-up-the-geo-epic-toolkit","title":"Steps to Set Up the Geo-Epic Toolkit","text":"<ol> <li>Create a virtual environment in conda <pre><code>conda create --name geo_epic python=3.11.9\n</code></pre></li> <li>Activate the environment <pre><code>conda activate geo_epic\n</code></pre></li> <li> <p>Install gdal     Gdal is used by geo-epic for processing geospatial files. So install gdal using this command.     <pre><code>conda install gdal\n</code></pre></p> </li> <li> <p>Install the Geo-Epic Toolkit    There are two options for installing the Geo-Epic Toolkit:</p> <p>i. Option 1: Install Directly from GitHub(recommended) <pre><code>pip install git+https://github.com/smarsGroup/geo-epic.git\n</code></pre> i. Option 2: Install locally     This option is advisable only for developers.     <pre><code>git clone https://github.com/smarsGroup/geo-epic.git\ncd geo-epic\npip install .\n</code></pre></p> </li> </ol> <p>Now, the geo-epic toolkit is sucessfully installed on the geo_epic conda environment. All the commands and python API can be accessed via that conda environment. Happy coding!</p>"},{"location":"opt/","title":"Model Calibration","text":""},{"location":"opt/#overview","title":"Overview","text":"<p>The Calibration Module in Geo-Epic is developed to assist in tuning desired parameters involved in the EPIC model based on observational data, such as Leaf Area Index (LAI), Net Ecosystem Exchange (NEE), crop yield, or biomass. This allows model parameters to be refined to better reflect specific local conditions or experimental results.</p>"},{"location":"opt/#getting-started","title":"Getting Started","text":"<p>To begin calibration, import the calibration module from the package:</p>"},{"location":"opt/#todo","title":"&lt;ToDo&gt;","text":""},{"location":"runepic/","title":"Running an EPIC Experiment","text":""},{"location":"runepic/#1-create-new-workspace","title":"1. Create new workspace","text":"<p><pre><code>epic_pkg workspace new -w Test\ncd Test\n</code></pre> It willl create a new workspace in the new directory named 'Test'. This 'Test' folder will automatically create sub-folders for EPIC model like model, opc, sites, soil, weather and a config.yml doc in it. You need to to go to Test folder before simulation starts.</p>"},{"location":"runepic/#2-edit-config-file-as-needed","title":"2. Edit config file as needed","text":"<p>This package is mainly designed for study regions in the USA. In the config.yml file, update the settings in the config file based on your area of interest (AOI) and preferences. For example, if you need to run the model for the state of Maryland, USA, modify these rows as follows:</p> <pre><code>EXPName: Nitrogen Assessment (Your Experiment Name) \nRegion: Maryland \ncode: MD \nFields_of_Interests: ./CropRotations/MDRotFilt.shp\n</code></pre> <p>Note: The MDRotFilt.shp file is the same one downloaded and placed in the CropRotations folder in the previous step. <pre><code>soil: \n   ssurgo_gdb: ./soil/gSSURGO_MD.gdb\n</code></pre> Guideline: The rule of thumb is to edit the configuration file using the region code specific to your study region, as done here using \"MD\" throughout the config file.</p>"},{"location":"runepic/#3-prepare-opc-file","title":"3. Prepare OPC File","text":"<p>OPC refers to the agricultural management practice files which is yet to automated. For now, you need to prpare management files and keep it in a new folder named 'OPC' inside the 'Test' directory.</p>"},{"location":"runepic/#4-prepare-the-workspace","title":"4. Prepare the workspace","text":"<p><pre><code>epic_pkg workspace prepare\n</code></pre> This command will automatically pre-process the input files before simulation.</p>"},{"location":"runepic/#5-and-execute-the-simulations","title":"5. And execute the simulations","text":"<p><pre><code>epic_pkg workspace run\n</code></pre> This command will simulate the operation/s and automatically save the results in a new folder named 'Output'. </p> <p>This command will also create a post_process.pynb doc which will have an example code to visualize the required parameters from ACY and DGN files. </p> <p>You can edit this code as per your requirements. You just have to identify the parameters and edit accordingly.</p>"},{"location":"runepic/#example-visualization","title":"Example Visualization","text":""},{"location":"runepic/#6-post-process-the-output-visualization","title":"6. Post-process the output visualization","text":"<p>You need to post-process the output files according to your interests. Generally, as an agricultural reserachers you need to process the DGN and ACY files.</p>"},{"location":"runepic/#for-post-processing","title":"For post-processing","text":"<p><pre><code>epic_pkg workspace post_process\n</code></pre> This will run the example code post_process.pynb which has been created in the Test folder. It will take a variable called 'YLDG' which denotes the yearly yield in t/ha/yr for all the sites and put it in a sepearte column corresponding to all the site ids with creatinh a yldg.csv file.</p>"},{"location":"runepic/#for-visualization","title":"For visualization","text":"<p><pre><code>epic_pkg workspace visualize\n</code></pre> It will simply plot the 'YLDG' variable corresponding to the site ids and crate a map for study region. </p>"},{"location":"runepic/#your-plot-will-look-like-this","title":"Your plot will look like this:","text":""},{"location":"runexp/","title":"Running the Model","text":""},{"location":"runexp/#todo","title":"&lt;ToDo&gt;","text":"<pre><code>from geoEpic import Site, EpicModel\n\n# initialise a site object\nsite = Site(opc = './continuous_corn.OPC',  # management file\n            dly = './1123455.DLY',          # daily weather file \n            sol = './Andisol.SOL',          # soil file\n            sit = './1.SIT')                # site file\n\n\n# initialise the EPIC model\nmodel = EpicModel(path = './model/EPIC2301dt20230820')\nmodel.setup(start_year = 2014, duration = 10)\nmodel.set_output_types(['ACY', 'DGN'])\n\n# run the simulation for the site\nmodel.run(site)\n\n# get the required outputs\nacy = model.outputs['ACY']\nmodel.close()\n</code></pre> <p>Loading from config files:</p> <pre><code>site = Site.from_config(lat = , lon = , config = './config.yml')\nmodel = EpicModel.from_config(config = './config.yml')\n\nmodel.run(site)\nmodel.close()\n</code></pre> <p>Example config file: <pre><code># Model details\nEPICModel: ./model/EPIC2301dt20230820\nstart_year: 1995\nduration: 25\noutput_types:\n  - ACY  # Annual Crop data file\n  - DGN  # Daily general output file\nlog_dir: ./log\noutput_dir: ./output\n</code></pre></p> <ul> <li>To edit the OPC, SOL or files in the epic model folder, you could use the epic_editor. the following command will copy the epiceditor in to your current folder.</li> </ul> <pre><code>&gt;&gt; geo-epic workspace add epic_editor\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}